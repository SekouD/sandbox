
# coding: utf-8

# In[1]:

roots = {'ཀ' : 'A', 'ཀྱ' : 'A', 'ཀྲ' : 'A', 'ཀླ' : 'A', 'དཀ' : 'NB', 'དཀྱ' : 'A', 'དཀྲ' : 'A', 'དཀླ' : 'A', 'བཀ' : 'NB', 'བཀྱ' : 'A', 'བཀྲ' : 'A', 'བཀླ' : 'A', 'རྐ' : 'A', 'རྐྱ' : 'A', 'ལྐ' : 'A', 'སྐ' : 'A', 'སྐྱ' : 'A', 'སྐྲ' : 'A', 'བརྐ' : 'A', 'བརྐྱ' : 'A', 'བསྐ' : 'A', 'བསྐྱ' : 'A', 'བསྐྲ' : 'A', 
         'ཁ' : 'A', 'ཁྱ' : 'A', 'ཁྲ' : 'A', 'མཁ' : 'NB', 'མཁྱ' : 'A', 'མཁྲ' : 'A', 'འཁ' : 'NB', 'འཁྱ' : 'A', 'འཁྲ' : 'A', 
         'ག' : 'A', 'གྱ' : 'A', 'གྲ' : 'A', 'གླ' : 'A', 'དག' : 'NB', 'དགྱ' : 'A', 'དགྲ' : 'A', 'བག' : 'NB', 'བགྱ' : 'A', 'བགྲ' : 'A', 'མག' : 'NB', 'མགྱ' : 'A', 'མགྲ' : 'A', 'འག' : 'NB', 'འགྱ' : 'A', 'འགྲ' : 'A', 'རྒ' : 'A', 'རྒྱ' : 'A', 'ལྒ' : 'A', 'སྒ' : 'A', 'སྒྱ' : 'A', 'སྒྲ' : 'A', 'བརྒ' : 'A', 'བརྒྱ' : 'A', 'བསྒ' : 'A', 'བསྒྱ' : 'A', 'བསྒྲ' : 'A', 
         'ང' : 'A', 'དང' : 'NB', 'མང' : 'NB', 'རྔ' : 'A', 'ལྔ' : 'A', 'སྔ' : 'A', 'བརྔ' : 'A', 'བསྔ' : 'A', 
         'ཅ' : 'A', 'གཅ' : 'NB', 'བཅ' : 'NB', 'ལྕ' : 'A', 
         'ཆ' : 'A', 'མཆ' : 'NB', 'འཆ' : 'NB', 
         'ཇ' : 'A', 'མཇ' : 'NB', 'འཇ' : 'NB', 'རྗ' : 'A', 'ལྗ' : 'A', 'བརྗ' : 'A', 
         'ཉ' : 'A', 'གཉ' : 'NB', 'མཉ' : 'NB', 'རྙ' : 'A', 'སྙ' : 'A', 'བརྙ' : 'A', 'བསྙ' : 'A', 
         'ཏ' : 'A', 'ཏྲ' : 'A', 'གཏ' : 'NB', 'གཏྲ' : 'A', 'བཏ' : 'NB', 'བཏྲ' : 'A', 'རྟ' : 'A', 'ལྟ' : 'A', 'སྟ' : 'A', 'བརྟ' : 'A', 'བལྟ' : 'A', 'བསྟ' : 'A', 
         'ཐ' : 'A', 'ཐྲ' : 'A', 'མཐ' : 'NB', 'འཐ' : 'NB', 
         'ད' : 'A', 'དྲ' : 'A', 'གད' : 'NB', 'བད' : 'NB', 'མད' : 'NB', 'འད' : 'NB', 'འདྲ' : 'A', 'རྡ' : 'A', 'ལྡ' : 'A', 'སྡ' : 'A', 'བརྡ' : 'A', 'བལྡ' : 'A', 'བསྡ' : 'A', 
         'ན' : 'A', 'གན' : 'NB', 'མན' : 'NB', 'རྣ' : 'A', 'སྣ' : 'A', 'སྣྲ' : 'A', 'བརྣ' : 'A', 'བསྣ' : 'A', 
         'པ' : 'A', 'པྱ' : 'A', 'པྲ' : 'A', 'དཔ' : 'NB', 'དཔྱ' : 'A', 'དཔྲ' : 'A', 'ལྤ' : 'A', 'སྤ' : 'A', 'སྤྱ' : 'A', 'སྤྲ' : 'A', 
         'ཕ' : 'A', 'ཕྱ' : 'A', 'ཕྲ' : 'A', 'འཕ' : 'NB', 'འཕྱ' : 'A', 'འཕྲ' : 'A', 
         'བ' : 'A', 'བྱ' : 'A', 'བྲ' : 'A', 'བླ' : 'A', 'དབ' : 'NB', 'དབྱ' : 'A', 'དབྲ' : 'A', 'འབ' : 'NB', 'འབྱ' : 'A', 'འབྲ' : 'A', 'རྦ' : 'A', 'ལྦ' : 'A', 'སྦ' : 'A', 'སྦྱ' : 'A', 'སྦྲ' : 'A', 
         'མ' : 'A', 'མྱ' : 'A', 'མྲ' : 'A', 'དམ' : 'NB', 'དམྱ' : 'A', 'དམྲ' : 'A', 'རྨ' : 'A', 'རྨྱ' : 'A', 'སྨ' : 'A', 'སྨྱ' : 'A', 'སྨྲ' : 'A', 
         'ཙ' : 'A', 'གཙ' : 'NB', 'བཙ' : 'NB', 'རྩ' : 'A', 'སྩ' : 'A', 'བརྩ' : 'A', 'བསྩ' : 'A', 
         'ཚ' : 'A', 'མཚ' : 'NB', 'འཚ' : 'NB', 
         'ཛ' : 'A', 'མཛ' : 'NB', 'འཛ' : 'NB', 'རྫ' : 'A', 'བརྫ' : 'A', 
         'ཝ' : 'A', 
         'ཞ' : 'A', 'གཞ' : 'NB', 'བཞ' : 'NB', 
         'ཟ' : 'A', 'ཟླ' : 'A', 'གཟ' : 'NB', 'བཟ' : 'NB', 'བཟླ' : 'A', 
         'འ' : 'A', 
         'ཡ' : 'A', 'གཡ' : 'NB', 
         'ར' : 'A', 'རླ' : 'A', 'བརླ' : 'A', 
         'ལ' : 'A', 
         'ཤ' : 'A', 'གཤ' : 'NB', 'བཤ' : 'NB', 
         'ས' : 'A', 'སྲ' : 'A', 'སླ' : 'A', 'གས' : 'NB', 'བས' : 'NB', 'བསྲ' : 'A', 'བསླ' : 'A', 
         'ཧ' : 'A', 'ཧྲ' : 'A', 'ལྷ' : 'A', 
         'ཨ' : 'A'}
suffixes = ["འ", "ག", "གས", "ང", "ངས", "ད", "ན", "བ", "བས", "མ", "མས", "ལ", "འི", "འོ", "འང", "འམ", "ར", "ས",
             "ི", "ིག", "ིགས", "ིང", "ིངས", "ིད", "ིན", "ིབ", "ིབས", "ིམ", "ིམས", "ིལ", "ིའི", "ིའོ", "ིའང", "ིའམ", "ིར", "ིས",
             "ུ", "ུག", "ུགས", "ུང", "ུངས", "ུད", "ུན", "ུབ", "ུབས", "ུམ", "ུམས", "ུལ", "ུའི", "ུའོ", "ུའང", "ུའམ", "ུར", "ུས",
             "ེ", "ེག", "ེགས", "ེང", "ེངས", "ེད", "ེན", "ེབ", "ེབས", "ེམ", "ེམས", "ེལ", "ེའི", "ེའོ", "ེའང", "ེའམ", "ེར", "ེས",
             "ོ", "ོག", "ོགས", "ོང", "ོངས", "ོད", "ོན", "ོབ", "ོབས", "ོམ", "ོམས", "ོལ", "ོའི", "ོའོ", "ོའང", "ོའམ", "ོར", "ོས"]
merged =  ["འ", "འི", "འོ", "འང", "འམ", "ར", "ས"]
mingzhis = {'ཀ' : 'ཀ', 'ཀྱ' : 'ཀ', 'ཀྲ' : 'ཀ', 'ཀླ' : 'ལ', 'དཀ' : 'ཀ', 'དཀྱ' : 'ཀ', 'དཀྲ' : 'ཀ', 'དཀླ' : 'ལ', 'བཀ' : 'ཀ', 'བཀྱ' : 'ཀ', 'བཀྲ' : 'ཀ', 'བཀླ' : 'ཀ', 'རྐ' : 'ཀ', 'རྐྱ' : 'ཀ', 'ལྐ' : 'ཀ', 'སྐ' : 'ཀ', 'སྐྱ' : 'ཀ', 'སྐྲ' : 'ཀ', 'བརྐ' : 'ཀ', 'བརྐྱ' : 'ཀ', 'བསྐ' : 'ཀ', 'བསྐྱ' : 'ཀ', 'བསྐྲ' : 'ཀ', 'ཁ' : 'ཁ', 'ཁྱ' : 'ཁ', 'ཁྲ' : 'ཁ', 'མཁ' : 'ཁ', 'མཁྱ' : 'ཁ', 'མཁྲ' : 'ཁ', 'འཁ' : 'ཁ', 'འཁྱ' : 'ཁ', 'འཁྲ' : 'ཁ', 'ག' : 'ག', 'གྱ' : 'ག', 'གྲ' : 'ག', 'གླ' : 'ལ', 'དག' : 'ག', 'དགྱ' : 'ག', 'དགྲ' : 'ག', 'བག' : 'ག', 'བགྱ' : 'ག', 'བགྲ' : 'ག', 'མག' : 'ག', 'མགྱ' : 'ག', 'མགྲ' : 'ག', 'འག' : 'ག', 'འགྱ' : 'ག', 'འགྲ' : 'ག', 'རྒ' : 'ག', 'རྒྱ' : 'ག', 'ལྒ' : 'ག', 'སྒ' : 'ག', 'སྒྱ' : 'ག', 'སྒྲ' : 'ག', 'བརྒ' : 'ག', 'བརྒྱ' : 'ག', 'བསྒ' : 'ག', 'བསྒྱ' : 'ག', 'བསྒྲ' : 'ག', 'ང' : 'ང', 'དང' : 'ང', 'མང' : 'ང', 'རྔ' : 'ང', 'ལྔ' : 'ང', 'སྔ' : 'ང', 'བརྔ' : 'ང', 'བསྔ' : 'ང', 'ཅ' : 'ཅ', 'གཅ' : 'ཅ', 'བཅ' : 'ཅ', 'ལྕ' : 'ཅ', 'ཆ' : 'ཆ', 'མཆ' : 'ཆ', 'འཆ' : 'ཆ', 'ཇ' : 'ཇ', 'མཇ' : 'ཇ', 'འཇ' : 'ཇ', 'རྗ' : 'ཇ', 'ལྗ' : 'ཇ', 'བརྗ' : 'ཇ', 'ཉ' : 'ཉ', 'གཉ' : 'ཉ', 'མཉ' : 'ཉ', 'རྙ' : 'ཉ', 'སྙ' : 'ཉ', 'བརྙ' : 'ཉ', 'བསྙ' : 'ཉ', 'ཏ' : 'ཏ', 'ཏྲ' : 'ཏ', 'གཏ' : 'ཏ', 'གཏྲ' : 'ཏ', 'བཏ' : 'ཏ', 'བཏྲ' : 'ཏ', 'རྟ' : 'ཏ', 'ལྟ' : 'ཏ', 'སྟ' : 'ཏ', 'བརྟ' : 'ཏ', 'བལྟ' : 'ཏ', 'བསྟ' : 'ཏ', 'ཐ' : 'ཐ', 'ཐྲ' : 'ཐ', 'མཐ' : 'ཐ', 'འཐ' : 'ཐ', 'ད' : 'ད', 'དྲ' : 'ད', 'གད' : 'ད', 'བད' : 'ད', 'མད' : 'ད', 'འད' : 'ད', 'འདྲ' : 'ད', 'རྡ' : 'ད', 'ལྡ' : 'ད', 'སྡ' : 'ད', 'བརྡ' : 'ད', 'བལྡ' : 'ད', 'བསྡ' : 'ད', 'ན' : 'ན', 'གན' : 'ན', 'མན' : 'ན', 'རྣ' : 'ན', 'སྣ' : 'ན', 'སྣྲ' : 'ན', 'བརྣ' : 'ན', 'བསྣ' : 'ན', 'པ' : 'པ', 'པྱ' : 'པ', 'པྲ' : 'པ', 'དཔ' : 'པ', 'དཔྱ' : 'པ', 'དཔྲ' : 'པ', 'ལྤ' : 'པ', 'སྤ' : 'པ', 'སྤྱ' : 'པ', 'སྤྲ' : 'པ', 'ཕ' : 'ཕ', 'ཕྱ' : 'ཕ', 'ཕྲ' : 'ཕ', 'འཕ' : 'ཕ', 'འཕྱ' : 'ཕ', 'འཕྲ' : 'ཕ', 'བ' : 'བ', 'བྱ' : 'བ', 'བྲ' : 'བ', 'བླ' : 'ལ', 'དབ' : 'བ', 'དབྱ' : 'བ', 'དབྲ' : 'བ', 'འབ' : 'བ', 'འབྱ' : 'བ', 'འབྲ' : 'བ', 'རྦ' : 'བ', 'ལྦ' : 'བ', 'སྦ' : 'བ', 'སྦྱ' : 'བ', 'སྦྲ' : 'བ', 'མ' : 'མ', 'མྱ' : 'མ', 'མྲ' : 'མ', 'དམ' : 'མ', 'དམྱ' : 'མ', 'དམྲ' : 'མ', 'རྨ' : 'མ', 'རྨྱ' : 'མ', 'སྨ' : 'མ', 'སྨྱ' : 'མ', 'སྨྲ' : 'མ', 'ཙ' : 'ཙ', 'གཙ' : 'ཙ', 'བཙ' : 'ཙ', 'རྩ' : 'ཙ', 'སྩ' : 'ཙ', 'བརྩ' : 'ཙ', 'བསྩ' : 'ཙ', 'ཚ' : 'ཚ', 'མཚ' : 'ཚ', 'འཚ' : 'ཚ', 'ཛ' : 'ཛ', 'མཛ' : 'ཛ', 'འཛ' : 'ཛ', 'རྫ' : 'ཛ', 'བརྫ' : 'ཛ', 'ཝ' : 'ཝ', 'ཞ' : 'ཞ', 'གཞ' : 'ཞ', 'བཞ' : 'ཞ', 'ཟ' : 'ཟ', 'ཟླ' : 'ལ', 'གཟ' : 'ཟ', 'བཟ' : 'ཟ', 'བཟླ' : 'ལ', 'འ' : 'འ', 'ཡ' : 'ཡ', 'གཡ' : 'ཡ', 'ར' : 'ར', 'རླ' : 'ལ', 'བརླ' : 'ལ', 'ལ' : 'ལ', 'ཤ' : 'ཤ', 'གཤ' : 'ཤ', 'བཤ' : 'ཤ', 'ས' : 'ས', 'སྲ' : 'ས', 'སླ' : 'ལ', 'གས' : 'ས', 'བས' : 'ས', 'བསྲ' : 'ས', 'བསླ' : 'ལ', 'ཧ' : 'ཧ', 'ཧྲ' : 'ཧ', 'ལྷ' : 'ལ', 'ཨ' : 'ཨ'}


# In[21]:

# insert here all syllable that are ambiguous but should not and all 
# extra cases, like the དྭགས་ etc…
exceptions = {'མངས' : 'མ'}

def get_mingzhi(syl):
    global exceptions
    if syl not in exceptions: 
        l_s = len(syl)
        # find all possible roots
        root = []
        if syl[:4] in roots: root.append(syl[:4])    
        if syl[:3] in roots: root.append(syl[:3])
        if syl[:2] in roots: root.append(syl[:2])
        if syl[:1] in roots: root.append(syl[:1])
        # find all possible suffixes
        suffix = []
        if l_s > 1:
            if syl[l_s-1:] in suffixes: suffix.append(syl[l_s-1:])
            if syl[l_s-2:] in suffixes: suffix.append(syl[l_s-2:])
            if syl[l_s-3:] in suffixes: suffix.append(syl[l_s-3:])
        # find all possible matches 
        solutions = []
        if suffix != [] and root != []:
            #print('o')
            for r in root:
                for s in suffix:
                    # unexpected འ་ 
                    if roots[r] == 'A' and s == 'འ': 
                        print(roots[r])
                        return 3
                    else:
                        # if root+suffix make the syllable + avoids duplicates
                        if r+s == syl and mingzhis[r] not in solutions:
                            solutions.append(mingzhis[r])
            if solutions != [] : return ' '.join(solutions)
            # root + suffix don’t make syl
            else : return 2
        elif root != []:
            #print('k')
            for r in root:
                if r in roots and r == syl:
                    # if syllable is valid without suffix + without aa
                    if roots[r] != 'NB' and mingzhis[r] not in solutions: 
                        solutions.append(mingzhis[syl])
            if solutions != [] : return ' '.join(solutions)
            # mis-spelt Tibetan
            else : return 1
        # if 
        else: return 0
    else: return exceptions[syl]
    
print(get_mingzhi(''))


# In[7]:

import re


# In[16]:

with open('../spellcheck/IN/C1.txt', 'r', -1, 'utf-8-sig') as f:
    content = re.split(r'[\n ་།]+', f.read())


# In[22]:

for c in content:
    m = get_mingzhi(c)
    if type(m) is int:
        print(c, m, end = ' ')


# In[ ]:



